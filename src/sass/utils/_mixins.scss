// Mixins
/// respond-to
/// @param {string} || {int} $breakpoint
/// @return {css}
@mixin respond-to($breakpoint) {
  @if type-of($breakpoint) == 'string' {
    @if map-has-key($tweakpoints, $breakpoint) {
      $breakpoint: inspect(map-get($tweakpoints, $breakpoint));

      @media only screen and (min-width: $breakpoint) {
        @content;
      }
    } @else if map-has-key($breakpoints, $breakpoint) {
      $breakpoint: inspect(map-get($breakpoints, $breakpoint));

      @media only screen and (min-width: $breakpoint) {
        @content;
      }
    } @else {
      @error 'No value found for `#{$breakpoint}`. ';
    }
  } @else {
    @media only screen and (min-width: $breakpoint) {
      @content;
    }
  }
}
@mixin ease-out {
  transition: all .4s cubic-bezier(.23, 1, .32, 1);
}

@mixin tablet {
  @media screen and (max-width: 768px) {
    @content;
  }
}
@mixin transition($dur, $prop: all) {
	transition: $prop $dur ease;
}

@mixin bg-img($url) {
	background: url($url) center no-repeat;
	background-size: cover;
}
/// Reset List
///
/// Resets default list styling.
///
/// @usage - `@include reset-list`
///
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

/// Media Queries
///
/// Allows you to use inline media queries. Includes options for `$fix-mqs`.
///
/// $breakpoint - Desired breakpoint. Can be variable or unit.
/// $query - Defaults to `min-width`.
/// $type - Defaults to `screen`.

@mixin mq($breakpoint, $query: 'min-width', $type: 'screen') {

    @media #{$type} and (#{$query}: #{$breakpoint}) { @content; }
}
/// Outputs a rem and px fallback value for the given property.
/// @param {String} $property - the CSS property
/// @param {List|Number|String} $values
/// @example
///   @include rem(font-size, 12px);
///   /// font-size: 12px;
///   /// font-size: 0.75rem;
///
///   @include rem(padding, 16px 12px);
///   /// padding: 16px 12px;
///   /// padding: 1rem 0.75rem;
@mixin rem($property, $values) {
  $px: ();
  $rem: ();

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    }

    @else {
      $px: append($px, $value);
      $rem: append($rem, rem(strip-unit($value)));
    }
  }
  #{$property}: $px;
  #{$property}: $rem;
}
/// Outputs a `font-size: [x]rem;` declaration for the given px value.
/// @param {Number} $font-size - the px value to convert
@mixin rem-font-size($font-size) {
  @include rem(font-size, $font-size);
}

@mixin heading-text() {
  font-family: $heading-font, sans-serif;
  font-weight: bold;
  font-style: inherit;
  text-transform: uppercase;
}

@mixin body-text() {
  font-family: $body-font, sans-serif;
  font-weight: inherit;
  font-style: inherit;
  text-transform: inherit;
}

@mixin quote-text() {
  font-family: $heading-font, sans-serif;
  font-weight: inherit;
  font-style: italic;
  text-transform: inherit;
}

@mixin font-size($keyword) {
  $size: map-get($font-sizes, $keyword);

  @if $size == null {
    @warn 'Font size ‘#{$keyword}’ does not exist';
  }

  @else {
    @include rem-font-size($size);
  }
}
/// Event wrapper
/// @param {Bool} $self [false] - Whether or not to include current selector
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }

  @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}
/// Make a context based selector a little more friendly
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}
/// Clearfix
/// @example
///   @include clearfix();
@mixin clearfix {
  *zoom: 1;

  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}
/// Hide Text
///
/// @usage - `@include hide-text`
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}
/// Hidden
///
/// Hide from both screenreaders and browsers
///
/// @usage - `@include hidden`
@mixin hidden {
  display: none !important;
  visibility: hidden;
}
/// Visually Hidden
///
/// Hide only visually, but have it available for screenreaders
///
/// @usage - `@include visuallyhidden`
@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  /// Extends the .visuallyhidden class to allow the element to be focusable
  /// when navigated to via the keyboard: h5bp.com/p
  &.focusable {
    &:active,
    &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}
/// Invisible
///
/// Hide visually and from screenreaders, but maintain layout
///
/// @usage - `@include invisible`
@mixin invisible {
  visibility: hidden;
}
